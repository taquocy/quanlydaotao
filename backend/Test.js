// Generated by CodiumAI

describe('code snippet', () => {

    // Tests that the API successfully retrieves a list of HocPhan with a valid ModuleID
    it('should retrieve a list of HocPhan with a valid ModuleID', () => {
      const req = { params: { id: 1 } };
      const res = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        send: jest.fn()
      };
      const dbQueryMock = jest.fn((sql, callback) => {
        callback(null, [{ id: 1, name: 'HocPhan 1' }, { id: 2, name: 'HocPhan 2' }]);
      });
      db.query = dbQueryMock;

      code_under_test(req, res);

      expect(dbQueryMock).toHaveBeenCalledWith('SELECT * FROM HocPhan WHERE  ModuleID = 1', expect.any(Function));
      expect(res.json).toHaveBeenCalledWith([{ id: 1, name: 'HocPhan 1' }, { id: 2, name: 'HocPhan 2' }]);
    });

    // Tests that the API successfully creates a new HocPhan with valid data
    it('should create a new HocPhan with valid data', () => {
      const req = { body: { maHocPhan: 'HP001', tenHocPhan: 'HocPhan 1', soTinChi: 3 } };
      const res = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        send: jest.fn()
      };
      const dbQueryMock = jest.fn((sql, values, callback) => {
        callback(null, { insertId: 1 });
      });
      db.query = dbQueryMock;

      code_under_test(req, res);

      expect(dbQueryMock).toHaveBeenCalledWith('INSERT INTO HocPhan (MaHocPhan, TenHocPhan, SoTinChi) VALUES (?, ?, ?)', ['HP001', 'HocPhan 1', 3], expect.any(Function));
      expect(res.json).toHaveBeenCalledWith({ message: 'Học phần đã được tạo mới' });
    });

    // Tests that the API successfully updates an existing HocPhan with valid data
    it('should update an existing HocPhan with valid data', () => {
      const req = { params: { id: 1 }, body: { moduleID: 2 } };
      const res = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        send: jest.fn()
      };
      const dbQueryMock = jest.fn((sql, values, callback) => {
        callback(null, {});
      });
      db.query = dbQueryMock;

      code_under_test(req, res);

      expect(dbQueryMock).toHaveBeenCalledWith('UPDATE HocPhan SET ModuleID = 2 WHERE ID = 1', [2, 1], expect.any(Function));
      expect(res.json).toHaveBeenCalledWith({ message: 'Thông tin Học phần đã được cập nhật' });
    });

    // Tests that the API successfully updates an existing Module with valid data
    it('should update an existing Module with valid data', () => {
      const req = { params: { id: 1 }, body: { idSection: 2 } };
      const res = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        send: jest.fn()
      };
      const dbQueryMock = jest.fn((sql, values, callback) => {
        callback(null, {});
      });
      db.query = dbQueryMock;

      code_under_test(req, res);

      expect(dbQueryMock).toHaveBeenCalledWith('UPDATE Module SET idPhanDaotao = 2 WHERE ID = 1', [2, 1], expect.any(Function));
      expect(res.json).toHaveBeenCalledWith({ message: 'Thông tin Học phần đã được cập nhật' });
    });

    // Tests that the API successfully retrieves a list of Module with null idPhanDaotao
    it('should retrieve a list of Module with null idPhanDaotao', () => {
      const req = { params: { id: 1 } };
      const res = {
        json: jest.fn(),
        status: jest.fn().mockReturnThis(),
        send: jest.fn()
      };
      const dbQueryMock = jest.fn((sql, callback) => {
        callback(null, [{ id: 1, name: 'Module 1' }, { id: 2, name: 'Module 2' }]);
      });
      db.query = dbQueryMock;

      code_under_test(req, res);

      expect(dbQueryMock).toHaveBeenCalledWith('SELECT * FROM `Module` WHERE idPhanDaotao IS NULL', expect.any(Function));
      expect(res.json).toHaveBeenCalledWith([{ id: 1, name: 'Module 1' }, { id: 2, name: 'Module 2' }]);
    });
});
